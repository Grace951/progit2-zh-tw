[[_git_tagging]]
=== 標籤

(((tags)))
跟大多數的版本管理系統一樣，Git 有能力對專案比較特別的地方貼標籤，來表示其重要性。
Like most VCSs, Git has the ability to tag specific points in history as being important.
通常人們會用這個功能來標出發行版本，如 `v1.0`…等等。
Typically people use this functionality to mark release points (v1.0, and so on).
在這個章節中，你將會學到如何列出所有可用的標籤，如何建立新的標籤和各種不同類型的標籤。
In this section, you'll learn how to list the available tags, how to create new tags, and what the different types of tags are.

==== 列出你的標籤

想要列出 Git 中所有標籤的方法非常直覺。
Listing the available tags in Git is straightforward.
只要輸入 `git tag` 如下：(((git commands, tag)))
Just type `git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

這個指令將按字母排序列出所有標籤；雖然說標籤用什麼方式列出不是很重要。
This command lists the tags in alphabetical order; the order in which they appear has no real importance.

你也可以使用特定的 pattern 來搜尋標籤。
You can also search for tags with a particular pattern.
舉例來說，在 Git 原始版的版本庫中，已經包含了超過 500 個標籤。
The Git source repo, for instance, contains more than 500 tags.
如果你只想看到 1.8.5 系列的標籤，你可以執行以下範例：
If you're only interested in looking at the 1.8.5 series, you can run this:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== 建立新的標籤

Git 主要使用兩種類型的標籤：輕量級標籤和有註解的標籤。
Git uses two main types of tags: lightweight and annotated.

一個輕量級的標籤就很像是一個不會修改的分支——這個標籤只會指向一個特定的提交。
A lightweight tag is very much like a branch that doesn't change – it's just a pointer to a specific commit.

然而，有註解的標籤，會在 Git 的資料庫中儲存成一個完整的物件。
Annotated tags, however, are stored as full objects in the Git database.
它們將被計算校驗碼；包含貼標籤那個人的名字、e-mail 和日期；能夠紀錄一個標籤訊息；並且可以簽署及透過 GNU Privacy Guard (GPG) 驗證。
They're checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
通常建議你可以建立一個有註解的標籤，以便你可以保留跟這個標籤有關的所有資訊；但是你如果只想要一個暫時的標籤，或是因為某些原因不想保留額外的資訊，你也可以只用輕量級標籤。
It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.

[[_annotated_tags]]
==== 有註解的標籤

(((tags, annotated)))
建立一個有註解的標籤很簡單。
Creating an annotated tag in Git is simple.
最容易的方法是在你建立標籤時，同時指定 `-a` 的選項如下：(((git commands, tag)))
The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

指令中的 `-m` 選項指定了一個標籤訊息，這個訊息會保存在這個標籤中。
The `-m` specifies a tagging message, which is stored with the tag.
如果你沒有為標籤指定一個訊息，那麼 Git 會開啟你的編輯器以便你輸入標籤的訊息。
If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.

當你使用 `git show` 指令時，你可以查看標籤的資訊，還有這個標籤所標記的提交資訊如下：
You can see the tag data along with the commit that was tagged by using the `git show` command:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

上面範例顯示出標籤的資訊，這個提交是什麼時候被貼標籤的，並且在提交資訊前顯示這個標籤上面的訊息。
That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.

==== 輕量級標籤

(((tags, lightweight)))
另外一種能標記提交的標籤是輕量級標籤。
Another way to tag commits is with a lightweight tag.
This is basically the commit checksum stored in a file – no other information is kept.
To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
The command just shows the commit:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== 對以前的提交貼標籤

You can also tag commits after you've moved past them.
Suppose your commit history looks like this:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
You can add it after the fact.
To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

You can see that you've tagged the commit:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== 分享標籤

By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches – you can run `git push origin [tagname]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
This will transfer all of your tags to the remote server that are not already there.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Now, when someone else clones or pulls from your repository, they will get all your tags as well.

==== 檢出標籤

You can't really check out a tag in Git, since they can't be moved around.
If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with  `git checkout -b [branchname] [tagname]`:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
